@model DataAccess.Data.Models.Notice

@using Microsoft.AspNetCore.Identity

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
    var user = UserManager.GetUserAsync(User).Result;
    bool isAdmin = false;
    if (user != null)
    {
        IEnumerable<string> roles = UserManager.GetRolesAsync(user).Result;
        isAdmin = roles.Contains("admin");
    }
    ViewData["Title"] = "Объявление";
}

<h2>@Model.Subject</h2>
<div>@Model.Description</div>

<div>
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Category)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Category.CategoryName)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.CreatedAt)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.CreatedAt)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.IsActive)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.IsActive)
        </dd>
    </dl>
</div>
<div>
    @if (user != null)
    {
        @if ((user.Id == Model.Creator.Id) && (!isAdmin))
        {
            <a asp-action="Edit" asp-route-id="@Model.Id">Редактировать</a>
        }
        @if (isAdmin)
        {
            <a asp-area="Admin" asp-controller="Notices" asp-action="Edit" asp-route-id="@Model.Id">Редактировать</a> <span>|</span>
            <a asp-area="Admin" asp-controller="Notices" asp-action="Delete" asp-route-id="@Model.Id">Удалить</a>
        }
    }

</div>
